一、简介
Add sleuth to the classpath of a Spring Boot application (see below for Maven and Gradle examples), 
and you will see the correlation data being collected in logs, as long as you are logging requests.

―― 摘自官网

二、术语
Spring Cloud Sleuth 主要功能就是在分布式系统中提供追踪解决方案，并且兼容支持了 zipkin，你只需要在pom文件中引入相应的依赖即可。
即：服务之间互相调用，zipkin可以显示服务之间调用的情况。

Span：基本工作单元，例如，在一个新建的span中发送一个RPC等同于发送一个回应请求给RPC，span通过一个64位ID唯一标识，trace以另一个64位ID表示，
span还有其他数据信息，比如摘要、时间戳事件、关键值注释(tags)、span的ID、以及进度ID(通常是IP地址) 
span在不断的启动和停止，同时记录了时间信息，当你创建了一个span，你必须在未来的某个时刻停止它。
Trace：一系列spans组成的一个树状结构，例如，如果你正在跑一个分布式大数据工程，你可能需要创建一个trace。
Annotation：用来及时记录一个事件的存在，一些核心annotations用来定义一个请求的开始和结束 
cs - Client Sent -客户端发起一个请求，这个annotion描述了这个span的开始
sr - Server Received -服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络延迟
ss - Server Sent -注解表明请求处理的完成(当请求返回客户端)，如果ss减去sr时间戳便可得到服务端需要的处理请求时间
cr - Client Received -表明span的结束，客户端成功接收到服务端的回复，如果cr减去cs时间戳便可得到客户端从服务端获取回复的所有所需时间 
将Span和Trace在一个系统中使用Zipkin注解的过程图形化：

主要有三个配置 server-zipkin，以及互相调用的两个服务工程  provider1-zipkin  provider2-zipkin
server-zipkin
	配置：
		     <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-server</artifactId>
        </dependency>

        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-autoconfigure-ui</artifactId>
        </dependency>
    
    在其程序入口类, 加上注解@EnableZipkinServer，开启ZipkinServer的功能
    
    在配置文件application.yml指定服务端口为：
			server.port=9411
	
	provider1-zipkin与provider2-zipkin
	配置
		    <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zipkin</artifactId>
        </dependency>

在其配置文件application.yml指定zipkin server的地址，头通过配置“spring.zipkin.base-url”指定：
server.port=8988
spring.zipkin.base-url=http://localhost:9411
spring.application.name=service-hi